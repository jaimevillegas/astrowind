---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';

// Map of technology names to their corresponding icons
const techIcons = {
  // Web Technologies - Frontend
  React: 'logos:react',
  'Next.js': 'logos:nextjs-icon',
  Astro: 'logos:astro-icon',
  TailwindCSS: 'logos:tailwindcss-icon',
  TypeScript: 'logos:typescript-icon',
  'Three.js': 'logos:threejs',
  Zustand: 'simple-icons:react', // Using React icon as Zustand doesn't have official logo in iconify
  'Chart.js': 'logos:chartjs',
  Axios: 'simple-icons:axios',

  // Web Technologies - Backend & CMS
  'Node.js': 'logos:nodejs-icon',
  Express: 'simple-icons:express',
  MongoDB: 'logos:mongodb-icon',
  MySQL: 'logos:mysql',
  PHP: 'logos:php',
  WordPress: 'logos:wordpress-icon',
  Moodle: 'simple-icons:moodle',

  // Cloud & Services
  Firebase: 'logos:firebase',
  Supabase: 'logos:supabase-icon',
  Vercel: 'logos:vercel-icon',
  'Google Sheets API': 'logos:google-drive',
  Recharts: 'tabler:chart-bar',

  // Engineering Technologies - Hardware & Electronics
  Arduino: 'logos:arduino',
  'Raspberry Pi': 'logos:raspberry-pi',
  ESP32: 'simple-icons:espressif',
  ATmega32u4: 'tabler:cpu',
  'PCB Design': 'tabler:settings',
  KiCad: 'simple-icons:kicad',
  KiCAD: 'simple-icons:kicad', // Alternative spelling
  IoT: 'tabler:cloud',
  MQTT: 'tabler:antenna',

  // Engineering Technologies - CAD & Design
  SolidWorks: 'tabler:box',
  AutoCAD: 'tabler:ruler',
  'CAD Design': 'tabler:box',
  'Fusion 360': 'tabler:rotate',
  '3D Printing': 'tabler:printer',
  'CNC Machining': 'tabler:tool',
  DFM: 'tabler:dimensions',

  // Engineering Technologies - Analysis & Software
  'FEA Analysis': 'tabler:chart-dots',
  'Mechanical Design': 'tabler:tools',
  'Sheet Metal': 'tabler:stack',
  LittleVGL: 'tabler:layout',
  'Squareline Studio': 'tabler:palette',
  'G-code': 'tabler:code',

  // Programming Languages
  Python: 'logos:python',
  'C++': 'logos:c-plusplus',

  // Other
  Soldering: 'tabler:flame',
};
---

<div
  id="project-modal"
  class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4"
>
  <div
    class="bg-gray-900 dark:bg-black rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden shadow-2xl border border-gray-700 dark:border-gray-800 flex flex-col"
  >
    <!-- Image Section with Title and Close Button Overlay -->
    <div class="relative w-full h-[400px] bg-gradient-to-br from-gray-800 to-gray-900 overflow-hidden flex-shrink-0">
      <div id="modal-image" class="w-full h-full">
        <!-- Image will be inserted here -->
      </div>

      <!-- Gradient Overlay (Black to Transparent from top, and Black from bottom for badges) -->
      <div
        class="absolute inset-0 pointer-events-none z-10"
        style="background: linear-gradient(to bottom, transparent 0%, transparent 25%, transparent 50%, rgba(0,0,0,0.3) 75%, rgba(0,0,0,0.5) 100%);"
      >
      </div>

      <!-- Header with Title and Close Button -->
      <div class="absolute top-0 left-0 right-0 backdrop-blur-md bg-black/60 border-b border-orange-500/30 shadow-xl z-20">
        <div class="flex items-center justify-between px-4 md:px-6 py-2 md:py-3">
          <h2
            id="modal-title"
            class="text-lg md:text-xl font-bold text-orange-400 leading-tight pr-4 flex-1"
          >
          </h2>
          <button
            id="close-modal"
            class="text-orange-400 hover:text-orange-500 transition-all duration-200 hover:bg-orange-500/10 rounded-full p-1.5 md:p-2 hover:scale-110 flex-shrink-0"
          >
            <Icon name="tabler:x" class="w-5 h-5 md:w-6 md:h-6" />
          </button>
        </div>
      </div>

      <!-- Technologies Badges Section - Bottom of Image -->
      <div class="absolute bottom-0 left-0 right-0 p-4 md:p-6 z-30">
        <div id="modal-technologies" class="flex flex-wrap gap-2 justify-start">
          <!-- Technologies will be inserted here -->
        </div>
      </div>
    </div>

    <!-- Modal Content Scroll Area -->
    <div class="overflow-y-auto custom-scrollbar flex-1 min-h-0">
      <!-- Content Section -->
      <div class="px-6 md:px-8 py-6">
        <!-- Description -->
        <div>
          <h3 id="modal-description-title" class="text-lg font-semibold text-orange-500 mb-3 flex items-center gap-2">
            <Icon name="tabler:file-text" class="w-5 h-5" />
            <span>Descripción del Proyecto</span>
          </h3>
          <p id="modal-description" class="text-gray-300 dark:text-gray-400 leading-relaxed text-base"></p>
        </div>
      </div>
    </div>

    <!-- Action Buttons Section (Fixed at bottom) -->
    <div
      class="border-t border-orange-500/30 px-6 md:px-8 py-4 flex justify-end gap-3 flex-shrink-0 bg-gray-900 dark:bg-black"
    >
      <a
        id="modal-github"
        target="_blank"
        class="hidden flex items-center gap-2 px-3 py-2 md:px-4 md:py-2.5 border-2 border-orange-500 hover:border-orange-400 text-orange-500 hover:text-orange-400 rounded-lg font-semibold transition-all duration-200 hover:scale-105 text-sm"
      >
        <Icon name="tabler:brand-github" class="w-4 h-4 flex-shrink-0" />
        <span id="modal-github-text" class="hidden sm:inline">Ver Código</span>
      </a>
      <a
        id="modal-view"
        target="_blank"
        class="hidden flex items-center gap-2 px-4 py-2 md:px-6 md:py-2.5 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-semibold transition-all duration-200 hover:scale-105 shadow-lg text-sm"
      >
        <Icon name="tabler:eye" class="w-4 h-4 flex-shrink-0" />
        <span id="modal-view-text" class="hidden sm:inline">Ver Proyecto</span>
      </a>
    </div>
  </div>
</div>

<style>
  /* Custom scrollbar styles */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: theme(colors.orange.500) transparent;
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: theme(colors.orange.500);
    border-radius: 3px;
    transition: background-color 0.2s ease;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: theme(colors.orange.600);
  }

  /* Dark mode scrollbar */
  :global(.dark) .custom-scrollbar {
    scrollbar-color: theme(colors.orange.400) transparent;
  }

  :global(.dark) .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: theme(colors.orange.400);
  }

  :global(.dark) .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: theme(colors.orange.300);
  }

  /* Modal animations */
  #project-modal {
    animation: fadeIn 0.4s ease-out;
  }

  #project-modal > div {
    animation: slideInUp 0.4s ease-out;
  }

  /* Image styles and animations */
  #modal-image {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #modal-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: transform 0.3s ease-out;
  }

  #modal-image:hover img {
    transform: scale(1.02);
  }

  /* Header with title and close button */
  .backdrop-blur-md {
    animation: fadeIn 0.5s ease-out;
  }

  #modal-title {
    animation: slideInTitle 0.6s ease-out;
  }

  /* Close button hover effect */
  #close-modal:hover {
    background-color: rgba(249, 115, 22, 0.1);
  }

  /* Technology badges styling and animations */
  #modal-technologies span {
    animation: slideInBadge 0.3s ease-out;
    animation-fill-mode: both;
    padding: 0.5rem 0.875rem;
    background-color: rgb(234, 88, 12); /* orange-600 */
    border-radius: 0.375rem;
    font-size: 0.8125rem;
    font-weight: 600;
    color: white;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
    white-space: nowrap;
    box-shadow: 0 2px 8px rgba(234, 88, 12, 0.3);
  }

  #modal-technologies span:hover {
    background-color: rgb(194, 65, 12); /* orange-700 */
    box-shadow: 0 4px 12px rgba(234, 88, 12, 0.5);
    transform: translateY(-2px);
  }

  /* Badge icons */
  #modal-technologies span iconify-icon {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }

  #modal-technologies span:nth-child(1) {
    animation-delay: 0.05s;
  }
  #modal-technologies span:nth-child(2) {
    animation-delay: 0.1s;
  }
  #modal-technologies span:nth-child(3) {
    animation-delay: 0.15s;
  }
  #modal-technologies span:nth-child(4) {
    animation-delay: 0.2s;
  }
  #modal-technologies span:nth-child(5) {
    animation-delay: 0.25s;
  }
  #modal-technologies span:nth-child(n + 6) {
    animation-delay: 0.3s;
  }

  /* Button animations */
  #modal-view,
  #modal-github {
    position: relative;
    overflow: hidden;
  }

  #modal-view::before,
  #modal-github::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  #modal-view:hover::before,
  #modal-github:hover::before {
    left: 100%;
  }

  /* Smooth content animations */
  #modal-description {
    animation: slideInContent 0.6s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes slideInTitle {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInContent {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInBadge {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    #project-modal > div {
      max-width: 100%;
      margin: auto;
      max-height: 95vh;
    }

    .relative.w-full.h-\[400px\] {
      height: 320px !important;
    }

    #modal-title {
      font-size: 0.9375rem;
      line-height: 1.3;
    }

    /* Header responsive */
    .backdrop-blur-md > div {
      padding: 0.5rem 1rem !important;
    }

    #close-modal .w-5 {
      width: 1.25rem !important;
      height: 1.25rem !important;
    }

    #modal-technologies {
      gap: 0.375rem;
    }

    #modal-technologies span {
      padding: 0.375rem 0.625rem;
      font-size: 0.7rem;
    }

    #modal-technologies span iconify-icon {
      width: 0.875rem;
      height: 0.875rem;
    }
  }

  /* Tablet adjustments */
  @media (min-width: 641px) and (max-width: 1024px) {
    #modal-image {
      height: 380px;
    }
  }
</style>

<script define:vars={{ techIcons }}>
  // Detect language from current URL
  function isSpanish() {
    return window.location.pathname.startsWith('/es');
  }

  // Text content for both languages
  const textContent = {
    es: {
      viewProject: 'Ver Proyecto',
      viewCode: 'Ver Código',
      description: 'Descripción del Proyecto',
    },
    en: {
      viewProject: 'View Project',
      viewCode: 'View Code',
      description: 'Project Description',
    },
  };

  function setupModal() {
    const modal = document.getElementById('project-modal');
    const closeBtn = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalDescription = document.getElementById('modal-description');
    const modalView = document.getElementById('modal-view');
    const modalGithub = document.getElementById('modal-github');
    const modalTechnologies = document.getElementById('modal-technologies');

    // Get current language
    const lang = isSpanish() ? 'es' : 'en';
    const texts = textContent[lang];

    // Update button text labels
    const viewText = document.getElementById('modal-view-text');
    const viewTextShort = document.getElementById('modal-view-text-short');
    const githubText = document.getElementById('modal-github-text');
    const githubTextShort = document.getElementById('modal-github-text-short');
    const descriptionTitle = document.getElementById('modal-description-title');

    if (viewText) viewText.textContent = texts.viewProject;
    if (viewTextShort) viewTextShort.textContent = texts.viewProject.split(' ')[0]; // "Ver" or "View"
    if (githubText) githubText.textContent = texts.viewCode;
    if (githubTextShort) githubTextShort.textContent = texts.viewCode.split(' ')[0]; // "Código" or "Code"
    if (descriptionTitle) descriptionTitle.querySelector('span').textContent = texts.description;

    // Close modal when clicking the close button
    closeBtn?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });

    // Close modal when pressing Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        modal.classList.add('hidden');
      }
    });

    // Add click event to all project cards
    document.querySelectorAll('.project-card').forEach((card) => {
      card.addEventListener('click', () => {
        const project = {
          title: card.dataset.title,
          description: card.dataset.description,
          image: card.dataset.image,
          view: card.dataset.view,
          github: card.dataset.github,
          technologies: JSON.parse(card.dataset.technologies || '[]'),
          features: JSON.parse(card.dataset.features || '[]'),
        };

        // Set title
        if (modalTitle) modalTitle.textContent = project.title;

        // Set description
        if (modalDescription) modalDescription.textContent = project.description;

        // Handle view button
        if (modalView) {
          if (project.view && project.view !== '#') {
            modalView.href = project.view;
            modalView.classList.remove('hidden');
          } else {
            modalView.classList.add('hidden');
          }
        }

        // Handle github button
        if (modalGithub) {
          if (project.github && project.github !== '#') {
            modalGithub.href = project.github;
            modalGithub.classList.remove('hidden');
          } else {
            modalGithub.classList.add('hidden');
          }
        }

        // Set the image
        if (modalImage) {
          modalImage.innerHTML = `<img src="${project.image}" alt="${project.title}" style="width: 100%; height: 100%; object-fit: contain;">`;
        }

        // Create and set the technologies with icons
        if (modalTechnologies) {
          modalTechnologies.innerHTML = project.technologies
            .map((tech) => {
              const iconName = techIcons[tech] || 'tabler:code';
              return `
                <span class="inline-flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-orange-700 bg-orange-100 rounded-full dark:bg-orange-900/50 dark:text-orange-300 border border-orange-200 dark:border-orange-800 hover:bg-orange-200 dark:hover:bg-orange-900 transition-colors duration-200" style="line-height: 1;">
                  <iconify-icon icon="${iconName}" style="width: 0.875rem; height: 0.875rem; flex-shrink: 0; display: flex; align-items: center; justify-content: center;"></iconify-icon>${tech}
                </span>
              `;
            })
            .join('');
        }

        modal?.classList.remove('hidden');
      });
    });
  }

  // Setup modal when the page loads
  document.addEventListener('astro:page-load', setupModal);
  // Also setup on initial load
  setupModal();
</script>

<!-- Add Iconify script for dynamic icons -->
<script is:inline src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
