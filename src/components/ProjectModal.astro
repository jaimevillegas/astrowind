---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';

// Map of technology names to their corresponding icons
const techIcons = {
  // Web Technologies
  'React': 'logos:react',
  'Next.js': 'logos:nextjs-icon',
  'Astro': 'logos:astro-icon',
  'TailwindCSS': 'logos:tailwindcss-icon',
  'Node.js': 'logos:nodejs-icon',
  'Express': 'simple-icons:express',
  'MongoDB': 'logos:mongodb-icon',
  'Firebase': 'logos:firebase',
  'Supabase': 'logos:supabase-icon',
  'Vercel': 'logos:vercel-icon',
  
  // Engineering Technologies
  'Arduino': 'logos:arduino',
  'Raspberry Pi': 'logos:raspberry-pi',
  'Python': 'logos:python',
  'C++': 'logos:c-plusplus',
  'PCB Design': 'tabler:circuit-board',
  'KiCad': 'simple-icons:kicad',
  'IoT': 'tabler:devices',
  'MQTT': 'tabler:broadcast',
  'SolidWorks': 'tabler:3d-cube-sphere',
  'AutoCAD': 'tabler:ruler',
  'Fusion 360': 'tabler:3d-rotate',
  '3D Printing': 'tabler:printer-3d',
  'CNC Machining': 'tabler:tool',
  'G-code': 'tabler:code',
  'FEA Analysis': 'tabler:chart-dots',
  'Mechanical Design': 'tabler:tools',
  'Sheet Metal': 'tabler:stack-2',
  'Soldering': 'tabler:flame'
};
---

<div id="project-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white dark:bg-gray-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto custom-scrollbar">
    <div class="p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 id="modal-title" class="text-3xl font-bold"></h2>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
          <Icon name="tabler:x" class="w-8 h-8" />
        </button>
      </div>
      
      <div id="modal-image" class="mb-4 w-full h-[400px] rounded-xl overflow-hidden">
        <!-- Image will be inserted here -->
      </div>

      <div id="modal-technologies" class="flex flex-wrap gap-2 mb-4">
        <!-- Technologies will be inserted here -->
      </div>
      
      <p id="modal-description" class="text-gray-600 dark:text-gray-300 text-lg mb-4"></p>
      
      <div class="flex justify-between">
        <div id="modal-buttons" class="flex gap-4">
          <a id="modal-view" target="_blank" class="text-orange-500 hover:text-orange-600 dark:hover:text-orange-400 hover:underline flex gap-2 items-center text-lg font-medium transition-colors hidden">
            <Icon name="tabler:eye" class="w-6 h-6" />
            View Project
          </a>
          <a id="modal-github" class="text-orange-500 hover:text-orange-600 dark:hover:text-orange-400 hover:underline flex gap-2 items-center text-lg font-medium transition-colors hidden">
            <Icon name="tabler:brand-github" class="w-6 h-6" />
            Github
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Custom scrollbar styles */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: theme(colors.orange.500) theme(colors.gray.200);
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: theme(colors.gray.200);
    border-radius: 4px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: theme(colors.orange.500);
    border-radius: 4px;
    border: 2px solid theme(colors.gray.200);
  }

  /* Dark mode scrollbar */
  :global(.dark) .custom-scrollbar {
    scrollbar-color: theme(colors.orange.400) theme(colors.gray.700);
  }

  :global(.dark) .custom-scrollbar::-webkit-scrollbar-track {
    background: theme(colors.gray.700);
  }

  :global(.dark) .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: theme(colors.orange.400);
    border: 2px solid theme(colors.gray.700);
  }
</style>

<script define:vars={{ techIcons }}>
  function setupModal() {
    const modal = document.getElementById('project-modal');
    const closeBtn = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalDescription = document.getElementById('modal-description');
    const modalView = document.getElementById('modal-view');
    const modalGithub = document.getElementById('modal-github');
    const modalTechnologies = document.getElementById('modal-technologies');

    // Close modal when clicking the close button
    closeBtn?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });

    // Close modal when pressing Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        modal.classList.add('hidden');
      }
    });

    // Add click event to all project cards
    document.querySelectorAll('.project-card').forEach(card => {
      card.addEventListener('click', () => {
        const project = {
          title: card.dataset.title,
          description: card.dataset.description,
          image: card.dataset.image,
          view: card.dataset.view,
          github: card.dataset.github,
          technologies: JSON.parse(card.dataset.technologies || '[]')
        };

        if (modalTitle) modalTitle.textContent = project.title;
        if (modalDescription) modalDescription.textContent = project.description;
        if (modalView) {
          if (project.view && project.view !== '#') {
            modalView.href = project.view;
            modalView.classList.remove('hidden');
          } else {
            modalView.classList.add('hidden');
          }
        }
        if (modalGithub) {
          if (project.github && project.github !== '#') {
            modalGithub.href = project.github;
            modalGithub.classList.remove('hidden');
          } else {
            modalGithub.classList.add('hidden');
          }
        }
        
        // Create and set the image
        if (modalImage) {
          modalImage.innerHTML = `<img src="${project.image}" alt="${project.title}" class="w-full h-full object-contain">`;
        }

        // Create and set the technologies with icons
        if (modalTechnologies) {
          modalTechnologies.innerHTML = project.technologies
            .map(tech => {
              const iconName = techIcons[tech] || 'tabler:code';
              return `
                <span class="px-3 py-1.5 bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300 
                           rounded-full text-sm font-medium flex items-center gap-1.5 group hover:bg-orange-200 
                           dark:hover:bg-orange-800 transition-colors">
                  <span class="relative w-4 h-4">
                    <span class="absolute inset-0 flex items-center justify-center">
                      <iconify-icon icon="${iconName}" width="16" height="16"></iconify-icon>
                    </span>
                  </span>
                  ${tech}
                </span>
              `;
            })
            .join('');
        }

        modal?.classList.remove('hidden');
      });
    });
  }

  // Setup modal when the page loads
  document.addEventListener('astro:page-load', setupModal);
  // Also setup on initial load
  setupModal();
</script>

<!-- Add Iconify script for dynamic icons -->
<script is:inline src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
